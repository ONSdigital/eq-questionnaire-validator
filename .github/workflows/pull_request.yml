name: PR

on:
  pull_request:
    branches:
      - master

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - run: |
          echo "PYTHON_VERSION=$(cat .python-version)" >> $GITHUB_ENV
      - uses: actions/setup-python@v2
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - uses: actions/setup-node@v1
        with:
          node-version: "12.14.1"
      - run: |
          echo "PYTHON_VERSION=$(python -c 'import platform; print(platform.python_version())')" >> $GITHUB_ENV

      - name: Get yarn cache
        id: get-yarn-cache
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - name: Cache yarn modules
        id: cache-yarn
        uses: actions/cache@v1
        with:
          path: ${{ steps.get-yarn-cache.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('yarn.lock') }}
      - name: Install yarn deps
        run: yarn install

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: 1.2.1
          virtualenvs-create: true
          virtualenvs-in-project: false
          virtualenvs-path: ~/.virtualenvs

      - name: Cache Poetry virtualenv
        uses: actions/cache@v2
        id: cache-virtualenv
        with:
          path: ~/.virtualenvs
          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-virtualenvs-${{ hashFiles('poetry.lock') }}
      - name: Install virtual environment
        if: steps.cache-virtualenv.outputs.cache-hit != 'true'
        run: poetry install
      - name: Lint Python
        run: make lint

  test-unit:
    needs: lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - run:
          echo "PYTHON_VERSION=$(cat .python-version)" >> $GITHUB_ENV
      - uses: actions/setup-python@v2
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - run: |
          echo "PYTHON_VERSION=$(python -c 'import platform; print(platform.python_version())')" >> $GITHUB_ENV
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: 1.2.1
          virtualenvs-create: true
          virtualenvs-in-project: false
          virtualenvs-path: ~/.virtualenvs

      - name: Cache Poetry virtualenv
        uses: actions/cache@v2
        id: cache-virtualenv
        with:
          path: ~/.virtualenvs
          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-virtualenvs-${{ hashFiles('poetry.lock') }}
      - name: Install virtual environment
        if: steps.cache-virtualenv.outputs.cache-hit != 'true'
        run: poetry install
      - name: Running unit tests
        run: make test

  docker-push:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Tag
        run: |
          CLEAN_TAG=$(echo "${{ github.event.pull_request.head.ref  }}"  | tr / -)
          echo "TAG=$CLEAN_TAG" >> $GITHUB_ENV
      - name: Build
        run: |
          docker build -t onsdigital/eq-questionnaire-validator:$TAG .
          docker build -f Dockerfile-ajv -t onsdigital/eq-questionnaire-validator:$TAG-ajv .
      - name: Push
        run: |
          echo ${{ secrets.DOCKER_PASSWORD }} | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin
          echo "Pushing with tag [$TAG]"
          docker push onsdigital/eq-questionnaire-validator:$TAG
          echo "Pushing with tag [$TAG-ajv]"
          docker push onsdigital/eq-questionnaire-validator:$TAG-ajv
