name: PR

on:
  pull_request:
    branches:
      - master

jobs:
  lint-python:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v1
        with:
          python-version: 3.8
      - run: |
          echo "::set-env name=PYTHON_VERSION::$(python -c 'import platform; print(platform.python_version())')"
      - name: Install Pipenv
        run: pip install pipenv==2018.11.26
      - name: Cache virtualenv
        id: cache-virtualenv
        uses: actions/cache@v1
        with:
          path: ~/.local/share/virtualenvs/
          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-virtualenvs-${{ hashFiles('Pipfile.lock') }}
      - name: Install virtual environment
        if: steps.cache-virtualenv.outputs.cache-hit != 'true'
        run: pipenv install --dev
      - name: Lint Python
        run: pipenv run ./scripts/run_lint_python.sh
  lint-json:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v1
        with:
          node-version: '12.14.1'
      - name: Get yarn cache
        id: get-yarn-cache
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - name: Cache yarn modules
        id: cache-yarn
        uses: actions/cache@v1
        with:
          path: ${{ steps.get-yarn-cache.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('yarn.lock') }}
      - name: Install yarn deps
        run: yarn install
      - name: Lint JSON
        run: yarn run lint
  test-unit:
    needs: lint-python
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v1
        with:
          python-version: 3.8
      - run: |
          echo "::set-env name=PYTHON_VERSION::$(python -c 'import platform; print(platform.python_version())')"
      - name: Install pipenv
        run: pip install pipenv==2018.11.26
      - name: Cache virtualenv
        id: cache-virtualenv
        uses: actions/cache@v1
        with:
          path: ~/.local/share/virtualenvs/
          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-virtualenvs-${{ hashFiles('Pipfile.lock') }}
      - name: Install virtual environment
        if: steps.cache-virtualenv.outputs.cache-hit != 'true'
        run: pipenv install --dev
      - name: Running unit tests
        run: pipenv run py.test
  docker-push:
      runs-on: ubuntu-latest
      steps:
        - uses: actions/checkout@v2
        - name: Tag
          run: echo "::set-env name=TAG::${{ github.event.pull_request.head.ref }}"
        - name: Build
          run: docker build -t onsdigital/eq-questionnaire-validator:$TAG .
        - name: Push
          run: |
            echo ${{ secrets.DOCKER_PASSWORD }} | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin
            echo "Pushing with tag [$TAG]"
            docker push onsdigital/eq-questionnaire-validator:$TAG
